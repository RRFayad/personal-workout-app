// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?       @map("email_verified")
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  authenticator Authenticator[]

  profile                 UserProfile?
  WorkoutProgramStructure WorkoutProgramStructure?
  NutritionProgram        NutritionProgram?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique @map("credential_id")
  userId               String  @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}

model UserProfile {
  user_id       String   @id
  full_name     String
  height_in_cm  Int
  gender        Gender
  image_url     String?
  date_of_birth DateTime

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_profile")
}

model WorkoutProgramStructure {
  workout_program_id          Int      @id @default(autoincrement())
  user_id                     String   @unique
  available_training_days_qty Int
  workout_program_start       DateTime
  workout_program_end         DateTime

  user                  User                    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  WorkoutProgramDetails WorkoutProgramDetails[]

  @@map("workout_program_structure")
}

model WorkoutProgramDetails {
  workout_program_id Int
  day_number         Int
  day_name           String
  exercise_number    Int
  exercise_name      String
  sets_qty           Int

  workoutProgram WorkoutProgramStructure @relation(fields: [workout_program_id], references: [workout_program_id], onDelete: Cascade)

  @@unique([workout_program_id, day_number, exercise_number])
  @@map("workout_program_details")
}

model NutritionProgram {
  user_id                        String    @id
  weight_in_kg                   Int
  current_diet_phase             DietPhase
  weekly_training_hours          Int
  basal_metabolic_rate           Int
  total_daily_energy_expenditure Int
  daily_kcal                     Int
  daily_proteins                 Int
  daily_carbs                    Int
  daily_fats                     Int

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("nutrition_program")
}

enum Gender {
  male
  female
}

enum DietPhase {
  bulk
  maintain
  cut
}
